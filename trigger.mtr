;;; -*- Mode: TDL; Coding: utf-8 -*-

;;; Past
; ta-end_gr := arg0e_gr &
; [ CONTEXT [ RELS <! [ ARG0.E.TENSE past ] !> ],
;   FLAGS.TRIGGER "v-pst_irule" ].

 ;;; ARG1 is ga
; ga_gr_1 := arg0e_gr &
; [ CONTEXT [ RELS <!  [ ARG0.E.PASS -, ARG1 individual & #i ] !> ],
;   FLAGS [ SUBSUME < #i >,
; 	

;;; example of a rule for copulas:

;;; -- You can use regular expressions in the strings: "~.*_a_"
;; should use lexical type for na-adj
;na-cop-lex_gr := arg0e_gr &
;[ CONTEXT [ RELS <! [ PRED "~.*_a_"] !> ],
;  FLAGS.TRIGGER "na-cop-lex" ].


; (MS 2005-11-29) imperative

; nasai-end_gr :=  arg0e_gr &
; [ CONTEXT [ RELS <!  [ ARG0.SF comm ] !> ],
; FLAGS.TRIGGER "nasai-end" ].

; Questions

; ka_gr := generator_rule & 
; [ CONTEXT.RELS <!  [ ARG0.SF ques ] !>,
; FLAGS.TRIGGER "ka" ].
